config.vm.define "{{ hostname }}" do |{{ hostname }}|

    # Set the box-type and version (default is latest)
    {{ hostname }}.vm.box = "{{ image }}"
    {{ hostname }}.vm.box_version = {{ image_version|default('">= 0"') }}
    
    # Set the hostname
    {{ hostname }}.vm.hostname = "{{ hostname }}"

    # Setup networking
    {%- if ipv4_address %}
    {{ hostname }}.vm.network "private_network", ip: "{{ ipv4_address }}", virtualbox__intnet: "intnet"
    {% else %}
    {{ hostname }}.vm.network "private_network", type: "dhcp"
    {%- endif %}

    # Provision VM
    {%- if setup['type'] == 'ansible' %}
    {{ hostname }}.vm.provision "ansible_local" do |a|
        a.install = true,
        a.install_mode = "default",
        a.playbook = '{{ setup['val'] }}',
        a.become_user = "root",
        a.become = true
    end
    {% elif setup['type'] == 'shell' %}
     {{ hostname }}.vm.provision "shell", inline: '{{ setup['val'] }}', privileged: true
    {% elif setup['type'] == 'script' %}
    {{ hostname }}.vm.provision "shell", path: '{{ setup['val'] }}', privileged: true
    {% endif %}
    {#- BEGIN FILEBEAT/ELASTIC/KAFKA SECTION #}
    {%- if artifacts_to_collect -%}
    {%- for artifact in artifacts_to_collect -%}
    {% if artifact['type'] in ['filebeat','kafka','elastic'] %}
    {{ hostname }}.vm.provision "ansible_local" do |a|
        a.install = true,
        a.install_mode = "default",
        a.playbook = "filebeat_playbook_{{ hostname }}",
        a.become_user = "root",
        a.become = true
    end
    {%- endif  %}
    {%- endfor %}
    {%- endif  %}
    {#- END FILEBEAT/ELASTIC/KAFKA SECTION #}
    # Runtime triggers
    {#- BEGIN TCPDUMP SECTION #}
    {%- if artifacts_to_collect -%}
    {%- for artifact in artifacts_to_collect -%}
    {% if artifact['type'] == 'pcap' %}
    {{ hostname }}.trigger.after [:up, :reload] do |trigger|
        trigger.info = "Begin TCPDUMP capture."
        trigger.run_remote = { inline: 'rm -f nohup.out; nohup {{ artifact['val'][0] }} & sleep 1; echo $! > /var/run/tcpdump.pid', privileged: true }
    end
    {%- endif  %}
    {%- endfor %}
    {%- endif  %}
    {#- END TCPDUMP SECTION #}
    {{ hostname }}.trigger.after [:up, :reload] do |trigger|
        trigger.info = "Executing 'run'-section of the scenario component."
        {%- if run['type'] == 'script' -%}
        trigger.run_remote = { path: '{{ run['val'] }}', privileged: true }
        {% elif run['type'] == 'shell' %}
        {%- set ns = namespace(cli_setting_seen=false) %}
        {%- if artifacts_to_collect -%}
        {%- for artifact in artifacts_to_collect -%}
        {%- if artifact['type'] == 'cli_recording' %}
        {%- if not ns.cli_setting_seen %}
        {%- set cli_output_file = artifact['val'][0] %}
        trigger.run_remote = { inline: 'asciinema rec {{ cli_output_file }} -c \'{{ run['val'] }}\'', privileged: true }
        {%- set ns.cli_setting_seen = true %}
        {%- endif %}
        {%- endif %}
        {%- endfor %}
        {%- endif %}
        {%- if not ns.cli_setting_seen %}
        trigger.run_remote = { inline: '{{ run['val'] }}', privileged: true }
        {%- endif -%}
        {%- endif %}
    end

    # Data collection
    {% if artifacts_to_collect -%}
    {% for artifact in artifacts_to_collect -%}
    {%- if artifact['type'] == 'pcap' %}
    {{ hostname }}.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Stopping TCPDUMP"
        trigger.run_remote = { inline: 'if [ -f /var/run/tcpdump.pid ]; then kill $(cat /var/run/tcpdump.pid); rm -f /var/run/tcpdump.pid; fi', privileged: true }
    end
    {% elif artifact['type'] == 'files' %}
    {%- for file in artifact['val'] -%}
    {{ hostname }}.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Changing permissions on the remote artifact: {{ file }}"
        trigger.run_remote = { inline: 'chmod o+r {{ file }}', privileged: true }
    end
    {{ hostname }}.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Grabbing artifact from Guest machine: {{ file }}"
        trigger.run = { inline: 'vagrant scp {{ hostname }}:{{ file }} {{ dest_path }}' }
    end
    {{ hostname }}.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Removing artifact from Guest machine: {{ file }}"
        trigger.run_remote = { inline: 'rm -rf {{ file }}', privileged: true }
    end
    {% endfor -%}
    {% endif  %}
    {%- endfor %}
    {%- endif  %}
    {#-
        # vagrant-scp independent way of scp-ing a file
        trigger.run = {inline: "vagrant ssh-config --host {{ hostname }} > {{ dest_path}}/config_{{ hostname }}.txt"}
        trigger.run = {inline: "scp -F {{ dest_path}}/config_{{ hostname }}.txt {{ hostname }}:{{ file }} {{ dest_path }}"}
    -#}

end
