# simple_scenario.yaml - As shown in README
name: "Simple example Scenario"
description: |
  "This Scenario sets up a vulnerable web application and runs multiple NMAP scans against it."
provisioner: vagrant
use_default_templates: True

components:
  - name: main_server
    description: Main Ubuntu machine used in this example scenario
    image: ubuntu/focal64
    setup:
      type: shell
      val: |
        echo "[+] Installing dependencies"
        sudo apt-get update
        sudo apt install -y unzip nmap

        echo "[+] Installing Vulnerable Web App GruyÃ¨re"
        wget http://google-gruyere.appspot.com/gruyere-code.zip -O /tmp/gruyere-code.zip
        unzip /tmp/gruyere-code.zip -d /opt/gruyere-code

        echo "[+] Setting up logfile for Vulnerable Web App"
        sed -i 's/print >>sys.stderr, message/open("\/tmp\/gruyere.log","a+").writelines(list(message))/g' /opt/gruyere-code/gruyere.py

    # Notice the Jinja2 template variable
    run:
      type: shell
      val: |
        echo "[+] Run webserver"
        python2.7 /opt/gruyere-code/gruyere.py &
        "{{ variables.nmap }}"
        echo "{{ variables.test }}"

    artifacts_to_collect:
      - type: pcap
        val:  ["place BPF filter here"]
      - type: files
        val: ["/tmp/gruyere.log"]

# These entries are substituted for the Jinja2 tempate variable in the run section.
variables:
  - nmap:
    - nmap -sV --script=http-enum 127.0.0.1:8008
    - nmap -p8008 --script http-waf-detect 127.0.0.1
    - nmap -p8008 --script http-wordpress-users 127.0.0.1
  - test:
    - a
    - b
